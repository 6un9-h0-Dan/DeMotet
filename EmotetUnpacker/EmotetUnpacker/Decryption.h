#pragma once
#include "stdafx.h"

class Decryption
{
public:
    virtual bool Decrypt(uint8_t* Buffer, uint32_t Size) = 0;
	static void XorDecryption(uint8_t* Buffer, uint32_t BufferSize, const unsigned char* Key, uint32_t KeySize);
};

class ResourceDecryption : public Decryption
{
public:
	ResourceDecryption() = default;
    bool Decrypt(uint8_t* Buffer, uint32_t Size) override;
private:
	map<uint32_t, vector<uint8_t>> m_XorKeys =
	{
		{0xc2c26843, { 0x0e, 0x32, 0x52, 0xc2, 0xbc, 0x05, 0x4a, 0x0e, 0x1e, 0xdf, 0xad, 0x1d, 0xfc, 0x40, 0xd8, 0x35, 0x57, 0xb6 }},
		{0x6213af38, { 0x75, 0xf5, 0x83, 0x62, 0x8d, 0xc2, 0x93, 0xd9, 0x8e, 0x3b, 0x2d, 0xd0, 0x2f, 0xf4, 0xe4, 0x8d }},
		{0x590d1ebb, { 0xf6, 0x44, 0x9d, 0x59, 0x3c, 0x71, 0xc2, 0x53, 0xb1, 0x11, 0x97, 0x1b }},
		{0x4415c6ce, { 0x83, 0x9c, 0x85, 0x44, 0xba, 0x9a, 0x6e, 0x13, 0x28, 0xd8, 0x6b, 0x93, 0x8a }},
		{0x10921621, { 0x6c, 0x4c, 0x02, 0x10, 0x8f, 0x90, 0x5e, 0x87, 0x10, 0x42, 0xba, 0xcb, 0x59, 0x60, 0x83, 0x93 }},
		{0xa91f3151, { 0x1c, 0x6b, 0x8f, 0xa9, 0x34, 0x01, 0x53, 0x89, 0x51, 0x7c, 0x25, 0x2b, 0x82 }},
		{0x463103d5, { 0x98, 0x59, 0xa1, 0x46, 0xc8, 0xdd, 0x94, 0x76, 0x47, 0x27, 0xb6, 0x97, 0x44 }},
		{0xb053c88b, { 0xc6, 0x92, 0xc3, 0xb0, 0x22, 0x83, 0xe6, 0x3, 0xf0, 0x26, 0xaf, 0x39, 0x1c, 0xd, 0x23, 0xa6, 0x8, 0xd1, 0x5b, 0x86, 0xbf }}
	};
};

class DataSectionDecryption : public Decryption
{
public:
	DataSectionDecryption() = default;
	bool Decrypt(uint8_t* Buffer, uint32_t Size) override;
	inline static const map<uint32_t, vector<uint8_t>> m_Keys =
	{
		{ 0x628F, {	0x6C, 0x45, 0x5A, 0x34, 0x7A, 0x78, 0x38, 0x39, 0x5E, 0x6E, 0x5E, 0x6F, 0x72, 0x46, 0x49, 0x62,
					0x57, 0x4B, 0x4F, 0x76, 0x62, 0x4E, 0x31, 0x4B, 0x70, 0x34, 0x4D, 0x26, 0x25, 0x47, 0x2B, 0x37,
					0x37, 0x4F, 0x49, 0x5E, 0x42, 0x6E, 0x61, 0x38, 0x35, 0x70, 0x38, 0x79, 0x79, 0x70, 0x4E, 0x5F,
					0x34, 0x4F, 0x65, 0x23, 0x6C, 0x4A, 0x62, 0x4C, 0x2A, 0x55, 0x6F, 0x71, 0x40, 0x59, 0x5A, 0x5F,
					0x46, 0x54, 0x26, 0x51, 0x5E, 0x5F, 0x38, 0x37, 0x53, 0x54, 0x49, 0x37, 0x3F, 0x68, 0x43, 0x36,
					0x30, 0x41, 0x30, 0x26, 0x64, 0x2A, 0x62, 0x4D, 0x50, 0x40, 0x3F, 0x4E, 0x35, 0x00 }},

		{ 0x612D, {	0x46, 0x33, 0x33, 0x72, 0x48, 0x77, 0x7A, 0x56, 0x23, 0x4E, 0x52, 0x25, 0x42, 0x29, 0x4F, 0x57,
					0x38, 0x49, 0x61, 0x76, 0x52, 0x40, 0x46, 0x44, 0x69, 0x55, 0x57, 0x69, 0x6D, 0x2A, 0x50, 0x48,
					0x55, 0x49, 0x5F, 0x6E, 0x30, 0x50, 0x44, 0x32, 0x32, 0x44, 0x4D, 0x73, 0x6D, 0x69, 0x6E, 0x46,
					0x39, 0x73, 0x59, 0x61, 0x57, 0x45, 0x31, 0x32, 0x6B, 0x00 }},

		{ 0x73D7, {	0x6E, 0x43, 0x3F, 0x4C, 0x71, 0x34, 0x3F, 0x78, 0x5F, 0x30, 0x74, 0x79, 0x53, 0x6C, 0x78, 0x51,
					0x23, 0x35, 0x6B, 0x38, 0x43, 0x58, 0x5F, 0x4E, 0x40, 0x43, 0x55, 0x52, 0x34, 0x35, 0x52, 0x25,
					0x77, 0x31, 0x2B, 0x64, 0x5A, 0x34, 0x2A, 0x3E, 0x58, 0x54, 0x36, 0x52, 0x6C, 0x3C, 0x75, 0x78,
					0x23, 0x36, 0x6A, 0x42, 0x4D, 0x39, 0x26, 0x3F, 0x31, 0x38, 0x70, 0x34, 0x36, 0x26, 0x3F, 0x28,
					0x65, 0x52, 0x46, 0x5E, 0x55, 0x5E, 0x6C, 0x6A, 0x76, 0x77, 0x4D, 0x6E, 0x4D, 0x66, 0x49, 0x25,
					0x76, 0x29, 0x4A, 0x6D, 0x4B, 0x55, 0x29, 0x2B, 0x3C, 0x63, 0x53, 0x36, 0x21, 0x76, 0x6F, 0x53,
					0x28, 0x00 }},

		{ 0x2464, {	0x3F, 0x44, 0x21, 0x75, 0x3F, 0x58, 0x29, 0x6B, 0x72, 0x54, 0x7A, 0x64, 0x77, 0x24, 0x61, 0x6E,
					0x4D, 0x34, 0x70, 0x5F, 0x24, 0x62, 0x7A, 0x51, 0x3F, 0x6A, 0x37, 0x3F, 0x72, 0x45, 0x6E, 0x39,
					0x38, 0x41, 0x6E, 0x3F, 0x33, 0x2B, 0x30, 0x56, 0x3E, 0x5A, 0x40, 0x72, 0x78, 0x31, 0x25, 0x70,
					0x70, 0x6D, 0x28, 0x56, 0x4D, 0x43, 0x73, 0x24, 0x36, 0x6B, 0x54, 0x58, 0x6B, 0x4D, 0x34, 0x6E,
					0x39, 0x55, 0x61, 0x47, 0x4F, 0x5E, 0x33, 0x67, 0x4C, 0x4F, 0x46, 0x49, 0x67, 0x6A, 0x3C, 0x69,
					0x73, 0x74, 0x51, 0x49, 0x43, 0x58, 0x34, 0x2B, 0x56, 0x63, 0x56, 0x79, 0x74, 0x2B, 0x59, 0x55,
					0x55, 0x40, 0x51, 0x33, 0x6A, 0x47, 0x4B, 0x34, 0x4C, 0x70, 0x39, 0x24, 0x67, 0x57, 0x76, 0x00 }},

		{ 0xC7B, {	0x53, 0x62, 0x28, 0x77, 0x5E, 0x6B, 0x74, 0x74, 0x5A, 0x41, 0x79, 0x5F, 0x3F, 0x48, 0x63, 0x44,
					0x46, 0x23, 0x6B, 0x3C, 0x34, 0x76, 0x43, 0x53, 0x6D, 0x4B, 0x68, 0x4F, 0x66, 0x4A, 0x4C, 0x66,
					0x79, 0x61, 0x6A, 0x6C, 0x64, 0x47, 0x59, 0x35, 0x38, 0x49, 0x56, 0x70, 0x41, 0x77, 0x6C, 0x38,
					0x30, 0x4E, 0x61, 0x72, 0x64, 0x57, 0x4E, 0x46, 0x73, 0x43, 0x69, 0x4A, 0x70, 0x4F, 0x79, 0x4B,
					0x29, 0x6D, 0x75, 0x72, 0x63, 0x28, 0x4E, 0x61, 0x63, 0x6C, 0x6B, 0x36, 0x4D, 0x5A, 0x7A, 0x38,
					0x6C, 0x59, 0x29, 0x68, 0x38, 0x68, 0x59, 0x57, 0x4D, 0x2B, 0x50, 0x6E, 0x2A, 0x3F, 0x74, 0x57,
					0x49, 0x3E, 0x47, 0x4F, 0x65, 0x76, 0x2B, 0x4B, 0x43, 0x2A, 0x35, 0x42, 0x00 }},
	};
	inline static uint32_t m_KeySize = 0;
private:
	static void BuildKey(uint8_t* KeyBuffer, const int KeyBufferSize, const uint8_t* InitStr, const int InitStrSize);
};